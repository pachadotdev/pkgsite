[
  {
    "title": "build_home",
    "url": "reference/build_home.html",
    "content": "build_home Build home section build_home(pkg = \".\", quiet = FALSE, preview = FALSE) build_home_index(pkg = \".\", quiet = FALSE) pkgPath to package quiet Whether to suppress messages preview Whether to preview after building using a local server (requires the servr package) Invisible TRUE if the home page was built successfully  build_home() generates the home page from README.md or index.md  build_home() # Hide build messages build_home(quiet = TRUE) # Preview the home page after building build_home(preview = TRUE)",
    "type": "function"
  },
  {
    "title": "build_news",
    "url": "reference/build_news.html",
    "content": "build_news Build news page build_news(pkg = \".\", quiet = TRUE, preview = FALSE) pkgPath to package to document. quiet If quiet, will suppress output messages preview If TRUE, the news page will be opened using a local server (requires the servr package) Invisible TRUE if the news page was built successfully  Generates a news page from NEWS.md build_news() # Hide build messages build_news(quiet = TRUE) # Preview the news page after building build_news(preview = TRUE)",
    "type": "function"
  },
  {
    "title": "build_reference",
    "url": "reference/build_reference.html",
    "content": "build_reference Build reference section build_reference(pkg = \".\", lazy = FALSE, preview = FALSE) build_reference_index(pkg = \".\") pkgPath to package lazy Only rebuild if source is newer than destination preview Whether to preview after building using a local server (requires the servr package) Invisible TRUE if the reference was built successfully  build_reference() generates reference documentation from Roxygen comments  build_reference() # Only rebuild if source is newer than destination build_reference(lazy = TRUE) # Preview the site after building build_reference(preview = TRUE)",
    "type": "function"
  },
  {
    "title": "build_search_index",
    "url": "reference/build_search_index.html",
    "content": "build_search_index Build search index build_search_index(pkg = \".\") pkgPath to package Invisible TRUE if the search index was built successfully  Creates a search index of all content for client-side searching build_search_index()",
    "type": "function"
  },
  {
    "title": "build_site",
    "url": "reference/build_site.html",
    "content": "build_site Build a minimal pkgdown website build_site(pkg = \".\", lazy = FALSE, preview = FALSE, quiet = TRUE, url = NULL) pkgPath to package lazy If TRUE, will only rebuild if source is newer than destination preview Whether to preview the site after building using a local server (requires the servr package) quiet Whether to suppress build messages url Optional URL for the site, used to create CNAME file (e.g., useful for GitHub Pages) Invisible TRUE if the site was built successfully  build_site() creates a simple static documentation site with: init_site() build_home() build_reference() build_vignettes() The site uses a minimal template with a simple sidebar navigation. build_site() # Preview the site after building build_site(preview = TRUE) # Specify a URL to create a CNAME file build_site(url = \"yourdomain.com\") # Only rebuild if source is newer than destination build_site(lazy = TRUE)",
    "type": "function"
  },
  {
    "title": "build_vignettes",
    "url": "reference/build_vignettes.html",
    "content": "build_vignettes Build vignettes section build_vignettes(pkg = \".\", lazy = FALSE, quiet = FALSE, preview = FALSE) build_vignettes_index(pkg = \".\") pkgPath to package lazy Whether to skip files that haven't changed quiet Whether to suppress messages preview Whether to preview after building using a local server (requires the servr package) Invisible TRUE if the vignettes were built successfully  build_vignettes() renders R Markdown files from vignettes/ to vignettes/  build_vignettes() # Rebuild only if source is newer than destination build_vignettes(lazy = TRUE) # Hide build messages build_vignettes(quiet = TRUE) # Preview the vignettes index after building build_vignettes(preview = TRUE)",
    "type": "function"
  },
  {
    "title": "Editing the CSS template",
    "url": "vignettes/css.html",
    "content": "knitr::opts_chunk$set( collapse = TRUE, comment = \"#>\" ) Being this a package to build a minimal site, the CSS is very simple and it consists in two files: content.css and menu.css You can alter the CSS generated after running build_site(). If you open ./docs/content.cssyou can apply any valid CSS, for example by changing this ``css body { margin: 8px; padding: 0px; font-size: small; font-family: \"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Verdana, Helvetica, sans-serif; background-color: #fff; color: #222; line-height: 1.5; } into this ``css body { margin: 8px; padding: 0px; font-size: small; font-family: \"Comic Sans MS\", Arial, Verdana, Helvetica, sans-serif; background-color: #fff; color: #222; line-height: 1.5; } The change will be reflected in the site after refreshing the browser. Before <img src=\"figures/before_font_change.png\" alt=\"before changing the font family\" width=\"50%\"/> After <img src=\"figures/after_font_change.png\" alt=\"after changing the font family\" width=\"50%\"/>",
    "type": "vignette"
  },
  {
    "title": "Inserting images",
    "url": "vignettes/images.html",
    "content": "knitr::opts_chunk$set( collapse = TRUE, comment = \"#>\", fig.path = \"figures/\" ) Among the different image formats, it is possible to render images in a vignette as PNG or SVG. Here is an example of a rendered plot as PNG: <pre><code>``{r plot1, echo = FALSE, message = FALSE, dev = \"png\", fig.ext = \"png\", eval = capabilities(\"cairo\")} library(ggplot2) g <- ggplot(data = mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = \"lm\", se = FALSE) + labs( title = \"Scatter plot with regression line for MPG = A + B x WT\", subtitle = \"Source: own creation using the mtcars dataset\", x = \"Car Weight\", y = \"Miles per Gallon\" ) + theme_minimal(base_size = 13) g `<\/code><\/pre> library(ggplot2) g <- ggplot(data = mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = \"lm\", se = FALSE) + labs( title = \"Scatter plot with regression line for MPG = A + B x WT\", subtitle = \"Source: own creation using the mtcars dataset\", x = \"Car Weight\", y = \"Miles per Gallon\" ) + theme_minimal(base_size = 13) g The same plot rendered in SVG format: <pre><code>`{r plot2, echo = FALSE, message = FALSE, dev = \"svg\", fig.ext = \"svg\", eval = capabilities(\"cairo\")} g ``<\/code><\/pre> g",
    "type": "vignette"
  },
  {
    "title": "Displaying Math with MathJax",
    "url": "vignettes/mathjax.html",
    "content": "knitr::opts_chunk$set( collapse = TRUE, comment = \"#>\" ) pkgsite uses MathJax to render mathematical notation in R Markdown vignettes. MathJax is a JavaScript display engine for mathematics that works in all modern browsers. We can use LaTeX syntax to include mathematical expressions in our R Markdown documents. There are three main ways to include math in your text: 1. Inline math: The expressions $E = mc^2$ (or \\(E = mc^2\\)) will render as \\(E = mc^2\\) 2. Display math: The expressions $$E = mc^2$$ (or \\[E = mc^2\\]) will render as \\[ E = mc^2 \\] 3. Math environments: You can use LaTeX math environments like equation, align, etc. For example, the code ``latex \\begin{equation} E = mc^2 \\end{equation} ` will render as \\begin{equation} E = mc^2 \\end{equation} More complex expressions can be created using standard LaTeX math syntax. For example: `latex \\begin{align} % Normal distribution formula f(x | \\mu, \\sigma^2) &= \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} e^{-\\frac{(x - \\mu)^2}{2 \\sigma^2}} \\cr % Sample mean and variance \\bar{x} &= \\frac{1}{n} \\sum_{i=1}^{n} x_i \\cr s^2 &= \\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2 \\end{align} \\begin{align} % Normal distribution formula f(x | \\mu, \\sigma^2) &= \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} e^{-\\frac{(x - \\mu)^2}{2 \\sigma^2}} \\cr % Sample mean and variance \\bar{x} &= \\frac{1}{n} \\sum_{i=1}^{n} x_i \\cr s^2 &= \\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2 \\end{align} These more elegant expressions also work witn inline math mode, for example $\\{a_{ij}\\}_{m \\times n}\\$ renders as \\(\\{a_{ij}\\}_{m \\times n}\\). Other possibilities are begin{equation*}` or any other described in the MathJax documentation.",
    "type": "vignette"
  }
]
